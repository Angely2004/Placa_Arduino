// Pines de los LEDs
const int LED_RED = 13;
const int LED_YELLOW = 11;
const int LED_GREEN = 12;
const int buttonPin = 10;

int buttonState = HIGH;
int lastButtonState = HIGH;
unsigned long lastDebounceTime = 0;
unsigned long debounceDelay = 50;
int pressCount = 0;

// Estados de intermitencia
bool intermitenteRed = false;
bool intermitenteYellow = false;
bool intermitenteGreen = false;

// Estados fijos
bool estadoRed = false;
bool estadoGreen = false;
bool estadoYellow = false;

// Intermitencia timing
unsigned long previousMillis = 0;
const long interval = 500;
bool ledsOn = false;

void setup() {
  pinMode(LED_RED, OUTPUT);
  pinMode(LED_GREEN, OUTPUT);
  pinMode(LED_YELLOW, OUTPUT);
  pinMode(buttonPin, INPUT_PULLUP);

  Serial.begin(9600);
  mostrarMenu();
}

void loop() {
  // --- Lectura pulsador con debounce ---
  int reading = digitalRead(buttonPin);

  if (reading != lastButtonState) {
    lastDebounceTime = millis();
  }

  if ((millis() - lastDebounceTime) > debounceDelay) {
    if (reading != buttonState) {
      buttonState = reading;

      if (buttonState == LOW) { // Botón presionado
        pressCount = (pressCount % 6) + 1; // 1 a 6
        ejecutarAccionPulsador(pressCount);
      }
    }
  }
  lastButtonState = reading;

  // --- Lectura menú consola ---
  if (Serial.available() > 0) {
    char opcion = Serial.read();
    if (opcion != '\r' && opcion != '\n') {
      manejarMenuConsola(opcion);
    }
  }

  // --- Intermitencia por LED ---
  unsigned long currentMillis = millis();
  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;
    ledsOn = !ledsOn;

    // RED
    if (intermitenteRed) {
      digitalWrite(LED_RED, ledsOn ? HIGH : LOW);
    } else {
      digitalWrite(LED_RED, estadoRed ? HIGH : LOW);
    }

    // GREEN
    if (intermitenteGreen) {
      digitalWrite(LED_GREEN, ledsOn ? HIGH : LOW);
    } else {
      digitalWrite(LED_GREEN, estadoGreen ? HIGH : LOW);
    }

    // YELLOW
    if (intermitenteYellow) {
      digitalWrite(LED_YELLOW, ledsOn ? HIGH : LOW);
    } else {
      digitalWrite(LED_YELLOW, estadoYellow ? HIGH : LOW);
    }
  }
}

// =========================
// FUNCIONES
// =========================

void ejecutarAccionPulsador(int count) {
  // Apagar intermitencia
  intermitenteRed = false;
  intermitenteGreen = false;
  intermitenteYellow = false;

  // Apagar todos
  estadoRed = false;
  estadoGreen = false;
  estadoYellow = false;

  switch (count) {
    case 1:
      estadoRed = true;
      Serial.println("Pulsador: Solo LED ROJO encendido");
      break;
    case 2:
      estadoGreen = true;
      Serial.println("Pulsador: Solo LED VERDE encendido");
      break;
    case 3:
      estadoYellow = true;
      Serial.println("Pulsador: Solo LED AMARILLO encendido");
      break;
    case 4:
      Serial.println("Pulsador: Todos los LEDs apagados");
      break;
    case 5:
      estadoRed = true;
      estadoGreen = true;
      estadoYellow = true;
      Serial.println("Pulsador: Todos los LEDs encendidos");
      break;
    case 6:
      intermitenteRed = true;
      intermitenteGreen = true;
      intermitenteYellow = true;
      Serial.println("Pulsador: Intermitencia en todos los LEDs");
      break;
  }
}

void manejarMenuConsola(char opcion) {
  switch (opcion) {
    case '0':
      intermitenteRed = false;
      estadoRed = !estadoRed;
      Serial.println(estadoRed ? "LED ROJO encendido (toggle)" : "LED ROJO apagado (toggle)");
      break;
    case '1':
      intermitenteRed = false;
      estadoRed = true;
      Serial.println("LED ROJO encendido.");
      break;
    case '2':
      intermitenteRed = false;
      estadoRed = false;
      Serial.println("LED ROJO apagado.");
      break;
    case '3':
      intermitenteGreen = false;
      estadoGreen = true;
      Serial.println("LED VERDE encendido.");
      break;
    case '4':
      intermitenteGreen = false;
      estadoGreen = false;
      Serial.println("LED VERDE apagado.");
      break;
    case '5':
      intermitenteYellow = false;
      estadoYellow = true;
      Serial.println("LED AMARILLO encendido.");
      break;
    case '6':
      intermitenteYellow = false;
      estadoYellow = false;
      Serial.println("LED AMARILLO apagado.");
      break;
    case '7':
      intermitenteRed = false;
      intermitenteGreen = false;
      intermitenteYellow = false;
      estadoRed = true;
      estadoGreen = true;
      estadoYellow = true;
      Serial.println("Todos los LEDs encendidos.");
      break;
    case '8':
      intermitenteRed = false;
      intermitenteGreen = false;
      intermitenteYellow = false;
      estadoRed = false;
      estadoGreen = false;
      estadoYellow = false;
      Serial.println("Todos los LEDs apagados.");
      break;
    case '9':
      intermitenteRed = true;
      intermitenteGreen = true;
      intermitenteYellow = true;
      Serial.println("Intermitencia activada (todos los LEDs).");
      break;
    default:
      Serial.println("Opción no válida.");
      break;
  }

  mostrarMenu();
}

void mostrarMenu() {
  Serial.println("\n===== MENU =====");
  Serial.println("0. Alternar estado LED ROJO");
  Serial.println("1. Encender LED ROJO");
  Serial.println("2. Apagar LED ROJO");
  Serial.println("3. Encender LED VERDE");
  Serial.println("4. Apagar LED VERDE");
  Serial.println("5. Encender LED AMARILLO");
  Serial.println("6. Apagar LED AMARILLO");
  Serial.println("7. Encender TODOS los LEDs");
  Serial.println("8. Apagar TODOS los LEDs");
  Serial.println("9. Intermitencia de TODOS los LEDs");
  Serial.println("====================");
  Serial.print("Ingresa opción (0-9): ");
}
